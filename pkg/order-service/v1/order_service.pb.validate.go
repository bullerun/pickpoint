// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order-service/v1/order_service.proto

package order_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOrderCreateDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderCreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderCreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "OrderCreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ExpiryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAcceptDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "AcceptDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "AcceptDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAcceptDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "AcceptDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnFromClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnFromClient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnFromClient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnFromClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReturnFromClient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnToCourier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnToCourier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnToCourier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnToCourier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReturnToCourier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Packaging

	// no validation rules for Weigh

	// no validation rules for Cost

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on AddOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestMultiError, or nil if none found.
func (m *AddOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetShelfLife() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "ShelfLife",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrderRequest_Packaging_InLookup[m.GetPackaging()]; !ok {
		err := AddOrderRequestValidationError{
			field:  "Packaging",
			reason: "value must be in list [box film bag]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weigh

	// no validation rules for Cost

	if len(errors) > 0 {
		return AddOrderRequestMultiError(errors)
	}

	return nil
}

// AddOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestMultiError) AllErrors() []error { return m }

// AddOrderRequestValidationError is the validation error returned by
// AddOrderRequest.Validate if the designated constraints aren't met.
type AddOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestValidationError) ErrorName() string { return "AddOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestValidationError{}

var _AddOrderRequest_Packaging_InLookup = map[string]struct{}{
	"box":  {},
	"film": {},
	"bag":  {},
}

// Validate checks the field values on AddOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderResponseMultiError, or nil if none found.
func (m *AddOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrderResponseMultiError(errors)
	}

	return nil
}

// AddOrderResponseMultiError is an error wrapping multiple validation errors
// returned by AddOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type AddOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderResponseMultiError) AllErrors() []error { return m }

// AddOrderResponseValidationError is the validation error returned by
// AddOrderResponse.Validate if the designated constraints aren't met.
type AddOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderResponseValidationError) ErrorName() string { return "AddOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderResponseValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for InTheDeliveryPoint

	// no validation rules for Latest

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on UpdateIssuedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssuedRequestMultiError, or nil if none found.
func (m *UpdateIssuedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIssuedRequestMultiError(errors)
	}

	return nil
}

// UpdateIssuedRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateIssuedRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuedRequestMultiError) AllErrors() []error { return m }

// UpdateIssuedRequestValidationError is the validation error returned by
// UpdateIssuedRequest.Validate if the designated constraints aren't met.
type UpdateIssuedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuedRequestValidationError) ErrorName() string {
	return "UpdateIssuedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuedRequestValidationError{}

// Validate checks the field values on UpdateIssuedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssuedResponseMultiError, or nil if none found.
func (m *UpdateIssuedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIssuedResponseMultiError(errors)
	}

	return nil
}

// UpdateIssuedResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateIssuedResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuedResponseMultiError) AllErrors() []error { return m }

// UpdateIssuedResponseValidationError is the validation error returned by
// UpdateIssuedResponse.Validate if the designated constraints aren't met.
type UpdateIssuedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuedResponseValidationError) ErrorName() string {
	return "UpdateIssuedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuedResponseValidationError{}

// Validate checks the field values on ReturnOrderToCourierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderToCourierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderToCourierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderToCourierRequestMultiError, or nil if none found.
func (m *ReturnOrderToCourierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderToCourierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnOrderToCourierRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderToCourierRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderToCourierRequestMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderToCourierRequest.ValidateAll() if
// the designated constraints aren't met.
type ReturnOrderToCourierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderToCourierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderToCourierRequestMultiError) AllErrors() []error { return m }

// ReturnOrderToCourierRequestValidationError is the validation error returned
// by ReturnOrderToCourierRequest.Validate if the designated constraints
// aren't met.
type ReturnOrderToCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderToCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderToCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderToCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderToCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderToCourierRequestValidationError) ErrorName() string {
	return "ReturnOrderToCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderToCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderToCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderToCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderToCourierRequestValidationError{}

// Validate checks the field values on ReturnOrderToCourierResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderToCourierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderToCourierResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderToCourierResponseMultiError, or nil if none found.
func (m *ReturnOrderToCourierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderToCourierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnOrderToCourierResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderToCourierResponseMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderToCourierResponse.ValidateAll() if
// the designated constraints aren't met.
type ReturnOrderToCourierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderToCourierResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderToCourierResponseMultiError) AllErrors() []error { return m }

// ReturnOrderToCourierResponseValidationError is the validation error returned
// by ReturnOrderToCourierResponse.Validate if the designated constraints
// aren't met.
type ReturnOrderToCourierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderToCourierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderToCourierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderToCourierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderToCourierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderToCourierResponseValidationError) ErrorName() string {
	return "ReturnOrderToCourierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderToCourierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderToCourierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderToCourierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderToCourierResponseValidationError{}

// Validate checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnRequestMultiError, or nil if none found.
func (m *AcceptReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return AcceptReturnRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnRequestMultiError) AllErrors() []error { return m }

// AcceptReturnRequestValidationError is the validation error returned by
// AcceptReturnRequest.Validate if the designated constraints aren't met.
type AcceptReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnRequestValidationError) ErrorName() string {
	return "AcceptReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnRequestValidationError{}

// Validate checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnResponseMultiError, or nil if none found.
func (m *AcceptReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptReturnResponseMultiError(errors)
	}

	return nil
}

// AcceptReturnResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnResponseMultiError) AllErrors() []error { return m }

// AcceptReturnResponseValidationError is the validation error returned by
// AcceptReturnResponse.Validate if the designated constraints aren't met.
type AcceptReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnResponseValidationError) ErrorName() string {
	return "AcceptReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnResponseValidationError{}

// Validate checks the field values on GetReturnedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnedRequestMultiError, or nil if none found.
func (m *GetReturnedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetReturnedRequestMultiError(errors)
	}

	return nil
}

// GetReturnedRequestMultiError is an error wrapping multiple validation errors
// returned by GetReturnedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReturnedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnedRequestMultiError) AllErrors() []error { return m }

// GetReturnedRequestValidationError is the validation error returned by
// GetReturnedRequest.Validate if the designated constraints aren't met.
type GetReturnedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnedRequestValidationError) ErrorName() string {
	return "GetReturnedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnedRequestValidationError{}

// Validate checks the field values on GetReturnedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnedResponseMultiError, or nil if none found.
func (m *GetReturnedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnedResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnedResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnedResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnedResponseMultiError(errors)
	}

	return nil
}

// GetReturnedResponseMultiError is an error wrapping multiple validation
// errors returned by GetReturnedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReturnedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnedResponseMultiError) AllErrors() []error { return m }

// GetReturnedResponseValidationError is the validation error returned by
// GetReturnedResponse.Validate if the designated constraints aren't met.
type GetReturnedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnedResponseValidationError) ErrorName() string {
	return "GetReturnedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnedResponseValidationError{}
