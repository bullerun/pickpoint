// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i OzonHW1/client/internal/commands.AcceptOrderService -o accept_order_service_mock.go -n AcceptOrderServiceMock -p mock

import (
	order_service "OzonHW1/pkg/order-service/v1"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// AcceptOrderServiceMock implements mm_commands.AcceptOrderService
type AcceptOrderServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddOrder          func(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption) (ap1 *order_service.AddOrderResponse, err error)
	funcAddOrderOrigin    string
	inspectFuncAddOrder   func(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption)
	afterAddOrderCounter  uint64
	beforeAddOrderCounter uint64
	AddOrderMock          mAcceptOrderServiceMockAddOrder
}

// NewAcceptOrderServiceMock returns a mock for mm_commands.AcceptOrderService
func NewAcceptOrderServiceMock(t minimock.Tester) *AcceptOrderServiceMock {
	m := &AcceptOrderServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddOrderMock = mAcceptOrderServiceMockAddOrder{mock: m}
	m.AddOrderMock.callArgs = []*AcceptOrderServiceMockAddOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAcceptOrderServiceMockAddOrder struct {
	optional           bool
	mock               *AcceptOrderServiceMock
	defaultExpectation *AcceptOrderServiceMockAddOrderExpectation
	expectations       []*AcceptOrderServiceMockAddOrderExpectation

	callArgs []*AcceptOrderServiceMockAddOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AcceptOrderServiceMockAddOrderExpectation specifies expectation struct of the AcceptOrderService.AddOrder
type AcceptOrderServiceMockAddOrderExpectation struct {
	mock               *AcceptOrderServiceMock
	params             *AcceptOrderServiceMockAddOrderParams
	paramPtrs          *AcceptOrderServiceMockAddOrderParamPtrs
	expectationOrigins AcceptOrderServiceMockAddOrderExpectationOrigins
	results            *AcceptOrderServiceMockAddOrderResults
	returnOrigin       string
	Counter            uint64
}

// AcceptOrderServiceMockAddOrderParams contains parameters of the AcceptOrderService.AddOrder
type AcceptOrderServiceMockAddOrderParams struct {
	ctx  context.Context
	in   *order_service.AddOrderRequest
	opts []grpc.CallOption
}

// AcceptOrderServiceMockAddOrderParamPtrs contains pointers to parameters of the AcceptOrderService.AddOrder
type AcceptOrderServiceMockAddOrderParamPtrs struct {
	ctx  *context.Context
	in   **order_service.AddOrderRequest
	opts *[]grpc.CallOption
}

// AcceptOrderServiceMockAddOrderResults contains results of the AcceptOrderService.AddOrder
type AcceptOrderServiceMockAddOrderResults struct {
	ap1 *order_service.AddOrderResponse
	err error
}

// AcceptOrderServiceMockAddOrderOrigins contains origins of expectations of the AcceptOrderService.AddOrder
type AcceptOrderServiceMockAddOrderExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Optional() *mAcceptOrderServiceMockAddOrder {
	mmAddOrder.optional = true
	return mmAddOrder
}

// Expect sets up expected params for AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Expect(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption) *mAcceptOrderServiceMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &AcceptOrderServiceMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.paramPtrs != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by ExpectParams functions")
	}

	mmAddOrder.defaultExpectation.params = &AcceptOrderServiceMockAddOrderParams{ctx, in, opts}
	mmAddOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddOrder.expectations {
		if minimock.Equal(e.params, mmAddOrder.defaultExpectation.params) {
			mmAddOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddOrder.defaultExpectation.params)
		}
	}

	return mmAddOrder
}

// ExpectCtxParam1 sets up expected param ctx for AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) ExpectCtxParam1(ctx context.Context) *mAcceptOrderServiceMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &AcceptOrderServiceMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.params != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Expect")
	}

	if mmAddOrder.defaultExpectation.paramPtrs == nil {
		mmAddOrder.defaultExpectation.paramPtrs = &AcceptOrderServiceMockAddOrderParamPtrs{}
	}
	mmAddOrder.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddOrder.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddOrder
}

// ExpectInParam2 sets up expected param in for AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) ExpectInParam2(in *order_service.AddOrderRequest) *mAcceptOrderServiceMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &AcceptOrderServiceMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.params != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Expect")
	}

	if mmAddOrder.defaultExpectation.paramPtrs == nil {
		mmAddOrder.defaultExpectation.paramPtrs = &AcceptOrderServiceMockAddOrderParamPtrs{}
	}
	mmAddOrder.defaultExpectation.paramPtrs.in = &in
	mmAddOrder.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmAddOrder
}

// ExpectOptsParam3 sets up expected param opts for AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) ExpectOptsParam3(opts ...grpc.CallOption) *mAcceptOrderServiceMockAddOrder {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &AcceptOrderServiceMockAddOrderExpectation{}
	}

	if mmAddOrder.defaultExpectation.params != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Expect")
	}

	if mmAddOrder.defaultExpectation.paramPtrs == nil {
		mmAddOrder.defaultExpectation.paramPtrs = &AcceptOrderServiceMockAddOrderParamPtrs{}
	}
	mmAddOrder.defaultExpectation.paramPtrs.opts = &opts
	mmAddOrder.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmAddOrder
}

// Inspect accepts an inspector function that has same arguments as the AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Inspect(f func(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption)) *mAcceptOrderServiceMockAddOrder {
	if mmAddOrder.mock.inspectFuncAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("Inspect function is already set for AcceptOrderServiceMock.AddOrder")
	}

	mmAddOrder.mock.inspectFuncAddOrder = f

	return mmAddOrder
}

// Return sets up results that will be returned by AcceptOrderService.AddOrder
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Return(ap1 *order_service.AddOrderResponse, err error) *AcceptOrderServiceMock {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	if mmAddOrder.defaultExpectation == nil {
		mmAddOrder.defaultExpectation = &AcceptOrderServiceMockAddOrderExpectation{mock: mmAddOrder.mock}
	}
	mmAddOrder.defaultExpectation.results = &AcceptOrderServiceMockAddOrderResults{ap1, err}
	mmAddOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddOrder.mock
}

// Set uses given function f to mock the AcceptOrderService.AddOrder method
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Set(f func(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption) (ap1 *order_service.AddOrderResponse, err error)) *AcceptOrderServiceMock {
	if mmAddOrder.defaultExpectation != nil {
		mmAddOrder.mock.t.Fatalf("Default expectation is already set for the AcceptOrderService.AddOrder method")
	}

	if len(mmAddOrder.expectations) > 0 {
		mmAddOrder.mock.t.Fatalf("Some expectations are already set for the AcceptOrderService.AddOrder method")
	}

	mmAddOrder.mock.funcAddOrder = f
	mmAddOrder.mock.funcAddOrderOrigin = minimock.CallerInfo(1)
	return mmAddOrder.mock
}

// When sets expectation for the AcceptOrderService.AddOrder which will trigger the result defined by the following
// Then helper
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) When(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption) *AcceptOrderServiceMockAddOrderExpectation {
	if mmAddOrder.mock.funcAddOrder != nil {
		mmAddOrder.mock.t.Fatalf("AcceptOrderServiceMock.AddOrder mock is already set by Set")
	}

	expectation := &AcceptOrderServiceMockAddOrderExpectation{
		mock:               mmAddOrder.mock,
		params:             &AcceptOrderServiceMockAddOrderParams{ctx, in, opts},
		expectationOrigins: AcceptOrderServiceMockAddOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddOrder.expectations = append(mmAddOrder.expectations, expectation)
	return expectation
}

// Then sets up AcceptOrderService.AddOrder return parameters for the expectation previously defined by the When method
func (e *AcceptOrderServiceMockAddOrderExpectation) Then(ap1 *order_service.AddOrderResponse, err error) *AcceptOrderServiceMock {
	e.results = &AcceptOrderServiceMockAddOrderResults{ap1, err}
	return e.mock
}

// Times sets number of times AcceptOrderService.AddOrder should be invoked
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Times(n uint64) *mAcceptOrderServiceMockAddOrder {
	if n == 0 {
		mmAddOrder.mock.t.Fatalf("Times of AcceptOrderServiceMock.AddOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddOrder.expectedInvocations, n)
	mmAddOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddOrder
}

func (mmAddOrder *mAcceptOrderServiceMockAddOrder) invocationsDone() bool {
	if len(mmAddOrder.expectations) == 0 && mmAddOrder.defaultExpectation == nil && mmAddOrder.mock.funcAddOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddOrder.mock.afterAddOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddOrder implements mm_commands.AcceptOrderService
func (mmAddOrder *AcceptOrderServiceMock) AddOrder(ctx context.Context, in *order_service.AddOrderRequest, opts ...grpc.CallOption) (ap1 *order_service.AddOrderResponse, err error) {
	mm_atomic.AddUint64(&mmAddOrder.beforeAddOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmAddOrder.afterAddOrderCounter, 1)

	mmAddOrder.t.Helper()

	if mmAddOrder.inspectFuncAddOrder != nil {
		mmAddOrder.inspectFuncAddOrder(ctx, in, opts...)
	}

	mm_params := AcceptOrderServiceMockAddOrderParams{ctx, in, opts}

	// Record call args
	mmAddOrder.AddOrderMock.mutex.Lock()
	mmAddOrder.AddOrderMock.callArgs = append(mmAddOrder.AddOrderMock.callArgs, &mm_params)
	mmAddOrder.AddOrderMock.mutex.Unlock()

	for _, e := range mmAddOrder.AddOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmAddOrder.AddOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddOrder.AddOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmAddOrder.AddOrderMock.defaultExpectation.params
		mm_want_ptrs := mmAddOrder.AddOrderMock.defaultExpectation.paramPtrs

		mm_got := AcceptOrderServiceMockAddOrderParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddOrder.t.Errorf("AcceptOrderServiceMock.AddOrder got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddOrder.AddOrderMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmAddOrder.t.Errorf("AcceptOrderServiceMock.AddOrder got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddOrder.AddOrderMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmAddOrder.t.Errorf("AcceptOrderServiceMock.AddOrder got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddOrder.AddOrderMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddOrder.t.Errorf("AcceptOrderServiceMock.AddOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddOrder.AddOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddOrder.AddOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmAddOrder.t.Fatal("No results are set for the AcceptOrderServiceMock.AddOrder")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmAddOrder.funcAddOrder != nil {
		return mmAddOrder.funcAddOrder(ctx, in, opts...)
	}
	mmAddOrder.t.Fatalf("Unexpected call to AcceptOrderServiceMock.AddOrder. %v %v %v", ctx, in, opts)
	return
}

// AddOrderAfterCounter returns a count of finished AcceptOrderServiceMock.AddOrder invocations
func (mmAddOrder *AcceptOrderServiceMock) AddOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddOrder.afterAddOrderCounter)
}

// AddOrderBeforeCounter returns a count of AcceptOrderServiceMock.AddOrder invocations
func (mmAddOrder *AcceptOrderServiceMock) AddOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddOrder.beforeAddOrderCounter)
}

// Calls returns a list of arguments used in each call to AcceptOrderServiceMock.AddOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddOrder *mAcceptOrderServiceMockAddOrder) Calls() []*AcceptOrderServiceMockAddOrderParams {
	mmAddOrder.mutex.RLock()

	argCopy := make([]*AcceptOrderServiceMockAddOrderParams, len(mmAddOrder.callArgs))
	copy(argCopy, mmAddOrder.callArgs)

	mmAddOrder.mutex.RUnlock()

	return argCopy
}

// MinimockAddOrderDone returns true if the count of the AddOrder invocations corresponds
// the number of defined expectations
func (m *AcceptOrderServiceMock) MinimockAddOrderDone() bool {
	if m.AddOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddOrderMock.invocationsDone()
}

// MinimockAddOrderInspect logs each unmet expectation
func (m *AcceptOrderServiceMock) MinimockAddOrderInspect() {
	for _, e := range m.AddOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AcceptOrderServiceMock.AddOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddOrderCounter := mm_atomic.LoadUint64(&m.afterAddOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddOrderMock.defaultExpectation != nil && afterAddOrderCounter < 1 {
		if m.AddOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AcceptOrderServiceMock.AddOrder at\n%s", m.AddOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AcceptOrderServiceMock.AddOrder at\n%s with params: %#v", m.AddOrderMock.defaultExpectation.expectationOrigins.origin, *m.AddOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddOrder != nil && afterAddOrderCounter < 1 {
		m.t.Errorf("Expected call to AcceptOrderServiceMock.AddOrder at\n%s", m.funcAddOrderOrigin)
	}

	if !m.AddOrderMock.invocationsDone() && afterAddOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to AcceptOrderServiceMock.AddOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddOrderMock.expectedInvocations), m.AddOrderMock.expectedInvocationsOrigin, afterAddOrderCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AcceptOrderServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddOrderInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AcceptOrderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AcceptOrderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddOrderDone()
}
