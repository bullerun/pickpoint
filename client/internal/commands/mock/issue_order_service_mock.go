// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i OzonHW1/client/internal/commands.IssueOrderService -o issue_order_service_mock.go -n IssueOrderServiceMock -p mock

import (
	order_service "OzonHW1/pkg/order-service/v1"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// IssueOrderServiceMock implements mm_commands.IssueOrderService
type IssueOrderServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcUpdateIssued          func(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption) (up1 *order_service.UpdateIssuedResponse, err error)
	funcUpdateIssuedOrigin    string
	inspectFuncUpdateIssued   func(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption)
	afterUpdateIssuedCounter  uint64
	beforeUpdateIssuedCounter uint64
	UpdateIssuedMock          mIssueOrderServiceMockUpdateIssued
}

// NewIssueOrderServiceMock returns a mock for mm_commands.IssueOrderService
func NewIssueOrderServiceMock(t minimock.Tester) *IssueOrderServiceMock {
	m := &IssueOrderServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UpdateIssuedMock = mIssueOrderServiceMockUpdateIssued{mock: m}
	m.UpdateIssuedMock.callArgs = []*IssueOrderServiceMockUpdateIssuedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIssueOrderServiceMockUpdateIssued struct {
	optional           bool
	mock               *IssueOrderServiceMock
	defaultExpectation *IssueOrderServiceMockUpdateIssuedExpectation
	expectations       []*IssueOrderServiceMockUpdateIssuedExpectation

	callArgs []*IssueOrderServiceMockUpdateIssuedParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IssueOrderServiceMockUpdateIssuedExpectation specifies expectation struct of the IssueOrderService.UpdateIssued
type IssueOrderServiceMockUpdateIssuedExpectation struct {
	mock               *IssueOrderServiceMock
	params             *IssueOrderServiceMockUpdateIssuedParams
	paramPtrs          *IssueOrderServiceMockUpdateIssuedParamPtrs
	expectationOrigins IssueOrderServiceMockUpdateIssuedExpectationOrigins
	results            *IssueOrderServiceMockUpdateIssuedResults
	returnOrigin       string
	Counter            uint64
}

// IssueOrderServiceMockUpdateIssuedParams contains parameters of the IssueOrderService.UpdateIssued
type IssueOrderServiceMockUpdateIssuedParams struct {
	ctx  context.Context
	in   *order_service.UpdateIssuedRequest
	opts []grpc.CallOption
}

// IssueOrderServiceMockUpdateIssuedParamPtrs contains pointers to parameters of the IssueOrderService.UpdateIssued
type IssueOrderServiceMockUpdateIssuedParamPtrs struct {
	ctx  *context.Context
	in   **order_service.UpdateIssuedRequest
	opts *[]grpc.CallOption
}

// IssueOrderServiceMockUpdateIssuedResults contains results of the IssueOrderService.UpdateIssued
type IssueOrderServiceMockUpdateIssuedResults struct {
	up1 *order_service.UpdateIssuedResponse
	err error
}

// IssueOrderServiceMockUpdateIssuedOrigins contains origins of expectations of the IssueOrderService.UpdateIssued
type IssueOrderServiceMockUpdateIssuedExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Optional() *mIssueOrderServiceMockUpdateIssued {
	mmUpdateIssued.optional = true
	return mmUpdateIssued
}

// Expect sets up expected params for IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Expect(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption) *mIssueOrderServiceMockUpdateIssued {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	if mmUpdateIssued.defaultExpectation == nil {
		mmUpdateIssued.defaultExpectation = &IssueOrderServiceMockUpdateIssuedExpectation{}
	}

	if mmUpdateIssued.defaultExpectation.paramPtrs != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by ExpectParams functions")
	}

	mmUpdateIssued.defaultExpectation.params = &IssueOrderServiceMockUpdateIssuedParams{ctx, in, opts}
	mmUpdateIssued.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateIssued.expectations {
		if minimock.Equal(e.params, mmUpdateIssued.defaultExpectation.params) {
			mmUpdateIssued.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateIssued.defaultExpectation.params)
		}
	}

	return mmUpdateIssued
}

// ExpectCtxParam1 sets up expected param ctx for IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) ExpectCtxParam1(ctx context.Context) *mIssueOrderServiceMockUpdateIssued {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	if mmUpdateIssued.defaultExpectation == nil {
		mmUpdateIssued.defaultExpectation = &IssueOrderServiceMockUpdateIssuedExpectation{}
	}

	if mmUpdateIssued.defaultExpectation.params != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Expect")
	}

	if mmUpdateIssued.defaultExpectation.paramPtrs == nil {
		mmUpdateIssued.defaultExpectation.paramPtrs = &IssueOrderServiceMockUpdateIssuedParamPtrs{}
	}
	mmUpdateIssued.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateIssued.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateIssued
}

// ExpectInParam2 sets up expected param in for IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) ExpectInParam2(in *order_service.UpdateIssuedRequest) *mIssueOrderServiceMockUpdateIssued {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	if mmUpdateIssued.defaultExpectation == nil {
		mmUpdateIssued.defaultExpectation = &IssueOrderServiceMockUpdateIssuedExpectation{}
	}

	if mmUpdateIssued.defaultExpectation.params != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Expect")
	}

	if mmUpdateIssued.defaultExpectation.paramPtrs == nil {
		mmUpdateIssued.defaultExpectation.paramPtrs = &IssueOrderServiceMockUpdateIssuedParamPtrs{}
	}
	mmUpdateIssued.defaultExpectation.paramPtrs.in = &in
	mmUpdateIssued.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmUpdateIssued
}

// ExpectOptsParam3 sets up expected param opts for IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) ExpectOptsParam3(opts ...grpc.CallOption) *mIssueOrderServiceMockUpdateIssued {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	if mmUpdateIssued.defaultExpectation == nil {
		mmUpdateIssued.defaultExpectation = &IssueOrderServiceMockUpdateIssuedExpectation{}
	}

	if mmUpdateIssued.defaultExpectation.params != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Expect")
	}

	if mmUpdateIssued.defaultExpectation.paramPtrs == nil {
		mmUpdateIssued.defaultExpectation.paramPtrs = &IssueOrderServiceMockUpdateIssuedParamPtrs{}
	}
	mmUpdateIssued.defaultExpectation.paramPtrs.opts = &opts
	mmUpdateIssued.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmUpdateIssued
}

// Inspect accepts an inspector function that has same arguments as the IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Inspect(f func(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption)) *mIssueOrderServiceMockUpdateIssued {
	if mmUpdateIssued.mock.inspectFuncUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("Inspect function is already set for IssueOrderServiceMock.UpdateIssued")
	}

	mmUpdateIssued.mock.inspectFuncUpdateIssued = f

	return mmUpdateIssued
}

// Return sets up results that will be returned by IssueOrderService.UpdateIssued
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Return(up1 *order_service.UpdateIssuedResponse, err error) *IssueOrderServiceMock {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	if mmUpdateIssued.defaultExpectation == nil {
		mmUpdateIssued.defaultExpectation = &IssueOrderServiceMockUpdateIssuedExpectation{mock: mmUpdateIssued.mock}
	}
	mmUpdateIssued.defaultExpectation.results = &IssueOrderServiceMockUpdateIssuedResults{up1, err}
	mmUpdateIssued.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateIssued.mock
}

// Set uses given function f to mock the IssueOrderService.UpdateIssued method
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Set(f func(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption) (up1 *order_service.UpdateIssuedResponse, err error)) *IssueOrderServiceMock {
	if mmUpdateIssued.defaultExpectation != nil {
		mmUpdateIssued.mock.t.Fatalf("Default expectation is already set for the IssueOrderService.UpdateIssued method")
	}

	if len(mmUpdateIssued.expectations) > 0 {
		mmUpdateIssued.mock.t.Fatalf("Some expectations are already set for the IssueOrderService.UpdateIssued method")
	}

	mmUpdateIssued.mock.funcUpdateIssued = f
	mmUpdateIssued.mock.funcUpdateIssuedOrigin = minimock.CallerInfo(1)
	return mmUpdateIssued.mock
}

// When sets expectation for the IssueOrderService.UpdateIssued which will trigger the result defined by the following
// Then helper
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) When(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption) *IssueOrderServiceMockUpdateIssuedExpectation {
	if mmUpdateIssued.mock.funcUpdateIssued != nil {
		mmUpdateIssued.mock.t.Fatalf("IssueOrderServiceMock.UpdateIssued mock is already set by Set")
	}

	expectation := &IssueOrderServiceMockUpdateIssuedExpectation{
		mock:               mmUpdateIssued.mock,
		params:             &IssueOrderServiceMockUpdateIssuedParams{ctx, in, opts},
		expectationOrigins: IssueOrderServiceMockUpdateIssuedExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateIssued.expectations = append(mmUpdateIssued.expectations, expectation)
	return expectation
}

// Then sets up IssueOrderService.UpdateIssued return parameters for the expectation previously defined by the When method
func (e *IssueOrderServiceMockUpdateIssuedExpectation) Then(up1 *order_service.UpdateIssuedResponse, err error) *IssueOrderServiceMock {
	e.results = &IssueOrderServiceMockUpdateIssuedResults{up1, err}
	return e.mock
}

// Times sets number of times IssueOrderService.UpdateIssued should be invoked
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Times(n uint64) *mIssueOrderServiceMockUpdateIssued {
	if n == 0 {
		mmUpdateIssued.mock.t.Fatalf("Times of IssueOrderServiceMock.UpdateIssued mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateIssued.expectedInvocations, n)
	mmUpdateIssued.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateIssued
}

func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) invocationsDone() bool {
	if len(mmUpdateIssued.expectations) == 0 && mmUpdateIssued.defaultExpectation == nil && mmUpdateIssued.mock.funcUpdateIssued == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateIssued.mock.afterUpdateIssuedCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateIssued.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateIssued implements mm_commands.IssueOrderService
func (mmUpdateIssued *IssueOrderServiceMock) UpdateIssued(ctx context.Context, in *order_service.UpdateIssuedRequest, opts ...grpc.CallOption) (up1 *order_service.UpdateIssuedResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateIssued.beforeUpdateIssuedCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateIssued.afterUpdateIssuedCounter, 1)

	mmUpdateIssued.t.Helper()

	if mmUpdateIssued.inspectFuncUpdateIssued != nil {
		mmUpdateIssued.inspectFuncUpdateIssued(ctx, in, opts...)
	}

	mm_params := IssueOrderServiceMockUpdateIssuedParams{ctx, in, opts}

	// Record call args
	mmUpdateIssued.UpdateIssuedMock.mutex.Lock()
	mmUpdateIssued.UpdateIssuedMock.callArgs = append(mmUpdateIssued.UpdateIssuedMock.callArgs, &mm_params)
	mmUpdateIssued.UpdateIssuedMock.mutex.Unlock()

	for _, e := range mmUpdateIssued.UpdateIssuedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmUpdateIssued.UpdateIssuedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateIssued.UpdateIssuedMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateIssued.UpdateIssuedMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateIssued.UpdateIssuedMock.defaultExpectation.paramPtrs

		mm_got := IssueOrderServiceMockUpdateIssuedParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateIssued.t.Errorf("IssueOrderServiceMock.UpdateIssued got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateIssued.UpdateIssuedMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmUpdateIssued.t.Errorf("IssueOrderServiceMock.UpdateIssued got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateIssued.UpdateIssuedMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmUpdateIssued.t.Errorf("IssueOrderServiceMock.UpdateIssued got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateIssued.UpdateIssuedMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateIssued.t.Errorf("IssueOrderServiceMock.UpdateIssued got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateIssued.UpdateIssuedMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateIssued.UpdateIssuedMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateIssued.t.Fatal("No results are set for the IssueOrderServiceMock.UpdateIssued")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmUpdateIssued.funcUpdateIssued != nil {
		return mmUpdateIssued.funcUpdateIssued(ctx, in, opts...)
	}
	mmUpdateIssued.t.Fatalf("Unexpected call to IssueOrderServiceMock.UpdateIssued. %v %v %v", ctx, in, opts)
	return
}

// UpdateIssuedAfterCounter returns a count of finished IssueOrderServiceMock.UpdateIssued invocations
func (mmUpdateIssued *IssueOrderServiceMock) UpdateIssuedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateIssued.afterUpdateIssuedCounter)
}

// UpdateIssuedBeforeCounter returns a count of IssueOrderServiceMock.UpdateIssued invocations
func (mmUpdateIssued *IssueOrderServiceMock) UpdateIssuedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateIssued.beforeUpdateIssuedCounter)
}

// Calls returns a list of arguments used in each call to IssueOrderServiceMock.UpdateIssued.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateIssued *mIssueOrderServiceMockUpdateIssued) Calls() []*IssueOrderServiceMockUpdateIssuedParams {
	mmUpdateIssued.mutex.RLock()

	argCopy := make([]*IssueOrderServiceMockUpdateIssuedParams, len(mmUpdateIssued.callArgs))
	copy(argCopy, mmUpdateIssued.callArgs)

	mmUpdateIssued.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateIssuedDone returns true if the count of the UpdateIssued invocations corresponds
// the number of defined expectations
func (m *IssueOrderServiceMock) MinimockUpdateIssuedDone() bool {
	if m.UpdateIssuedMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateIssuedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateIssuedMock.invocationsDone()
}

// MinimockUpdateIssuedInspect logs each unmet expectation
func (m *IssueOrderServiceMock) MinimockUpdateIssuedInspect() {
	for _, e := range m.UpdateIssuedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IssueOrderServiceMock.UpdateIssued at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateIssuedCounter := mm_atomic.LoadUint64(&m.afterUpdateIssuedCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateIssuedMock.defaultExpectation != nil && afterUpdateIssuedCounter < 1 {
		if m.UpdateIssuedMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IssueOrderServiceMock.UpdateIssued at\n%s", m.UpdateIssuedMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IssueOrderServiceMock.UpdateIssued at\n%s with params: %#v", m.UpdateIssuedMock.defaultExpectation.expectationOrigins.origin, *m.UpdateIssuedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateIssued != nil && afterUpdateIssuedCounter < 1 {
		m.t.Errorf("Expected call to IssueOrderServiceMock.UpdateIssued at\n%s", m.funcUpdateIssuedOrigin)
	}

	if !m.UpdateIssuedMock.invocationsDone() && afterUpdateIssuedCounter > 0 {
		m.t.Errorf("Expected %d calls to IssueOrderServiceMock.UpdateIssued at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateIssuedMock.expectedInvocations), m.UpdateIssuedMock.expectedInvocationsOrigin, afterUpdateIssuedCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IssueOrderServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockUpdateIssuedInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IssueOrderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IssueOrderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUpdateIssuedDone()
}
