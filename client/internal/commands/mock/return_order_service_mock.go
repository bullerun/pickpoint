// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i OzonHW1/client/internal/commands.ReturnOrderService -o return_order_service_mock.go -n ReturnOrderServiceMock -p mock

import (
	order_service "OzonHW1/pkg/order-service/v1"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// ReturnOrderServiceMock implements mm_commands.ReturnOrderService
type ReturnOrderServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcReturnOrderToCourier          func(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption) (rp1 *order_service.ReturnOrderToCourierResponse, err error)
	funcReturnOrderToCourierOrigin    string
	inspectFuncReturnOrderToCourier   func(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption)
	afterReturnOrderToCourierCounter  uint64
	beforeReturnOrderToCourierCounter uint64
	ReturnOrderToCourierMock          mReturnOrderServiceMockReturnOrderToCourier
}

// NewReturnOrderServiceMock returns a mock for mm_commands.ReturnOrderService
func NewReturnOrderServiceMock(t minimock.Tester) *ReturnOrderServiceMock {
	m := &ReturnOrderServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReturnOrderToCourierMock = mReturnOrderServiceMockReturnOrderToCourier{mock: m}
	m.ReturnOrderToCourierMock.callArgs = []*ReturnOrderServiceMockReturnOrderToCourierParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mReturnOrderServiceMockReturnOrderToCourier struct {
	optional           bool
	mock               *ReturnOrderServiceMock
	defaultExpectation *ReturnOrderServiceMockReturnOrderToCourierExpectation
	expectations       []*ReturnOrderServiceMockReturnOrderToCourierExpectation

	callArgs []*ReturnOrderServiceMockReturnOrderToCourierParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ReturnOrderServiceMockReturnOrderToCourierExpectation specifies expectation struct of the ReturnOrderService.ReturnOrderToCourier
type ReturnOrderServiceMockReturnOrderToCourierExpectation struct {
	mock               *ReturnOrderServiceMock
	params             *ReturnOrderServiceMockReturnOrderToCourierParams
	paramPtrs          *ReturnOrderServiceMockReturnOrderToCourierParamPtrs
	expectationOrigins ReturnOrderServiceMockReturnOrderToCourierExpectationOrigins
	results            *ReturnOrderServiceMockReturnOrderToCourierResults
	returnOrigin       string
	Counter            uint64
}

// ReturnOrderServiceMockReturnOrderToCourierParams contains parameters of the ReturnOrderService.ReturnOrderToCourier
type ReturnOrderServiceMockReturnOrderToCourierParams struct {
	ctx  context.Context
	in   *order_service.ReturnOrderToCourierRequest
	opts []grpc.CallOption
}

// ReturnOrderServiceMockReturnOrderToCourierParamPtrs contains pointers to parameters of the ReturnOrderService.ReturnOrderToCourier
type ReturnOrderServiceMockReturnOrderToCourierParamPtrs struct {
	ctx  *context.Context
	in   **order_service.ReturnOrderToCourierRequest
	opts *[]grpc.CallOption
}

// ReturnOrderServiceMockReturnOrderToCourierResults contains results of the ReturnOrderService.ReturnOrderToCourier
type ReturnOrderServiceMockReturnOrderToCourierResults struct {
	rp1 *order_service.ReturnOrderToCourierResponse
	err error
}

// ReturnOrderServiceMockReturnOrderToCourierOrigins contains origins of expectations of the ReturnOrderService.ReturnOrderToCourier
type ReturnOrderServiceMockReturnOrderToCourierExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Optional() *mReturnOrderServiceMockReturnOrderToCourier {
	mmReturnOrderToCourier.optional = true
	return mmReturnOrderToCourier
}

// Expect sets up expected params for ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Expect(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption) *mReturnOrderServiceMockReturnOrderToCourier {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	if mmReturnOrderToCourier.defaultExpectation == nil {
		mmReturnOrderToCourier.defaultExpectation = &ReturnOrderServiceMockReturnOrderToCourierExpectation{}
	}

	if mmReturnOrderToCourier.defaultExpectation.paramPtrs != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by ExpectParams functions")
	}

	mmReturnOrderToCourier.defaultExpectation.params = &ReturnOrderServiceMockReturnOrderToCourierParams{ctx, in, opts}
	mmReturnOrderToCourier.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReturnOrderToCourier.expectations {
		if minimock.Equal(e.params, mmReturnOrderToCourier.defaultExpectation.params) {
			mmReturnOrderToCourier.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReturnOrderToCourier.defaultExpectation.params)
		}
	}

	return mmReturnOrderToCourier
}

// ExpectCtxParam1 sets up expected param ctx for ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) ExpectCtxParam1(ctx context.Context) *mReturnOrderServiceMockReturnOrderToCourier {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	if mmReturnOrderToCourier.defaultExpectation == nil {
		mmReturnOrderToCourier.defaultExpectation = &ReturnOrderServiceMockReturnOrderToCourierExpectation{}
	}

	if mmReturnOrderToCourier.defaultExpectation.params != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Expect")
	}

	if mmReturnOrderToCourier.defaultExpectation.paramPtrs == nil {
		mmReturnOrderToCourier.defaultExpectation.paramPtrs = &ReturnOrderServiceMockReturnOrderToCourierParamPtrs{}
	}
	mmReturnOrderToCourier.defaultExpectation.paramPtrs.ctx = &ctx
	mmReturnOrderToCourier.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReturnOrderToCourier
}

// ExpectInParam2 sets up expected param in for ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) ExpectInParam2(in *order_service.ReturnOrderToCourierRequest) *mReturnOrderServiceMockReturnOrderToCourier {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	if mmReturnOrderToCourier.defaultExpectation == nil {
		mmReturnOrderToCourier.defaultExpectation = &ReturnOrderServiceMockReturnOrderToCourierExpectation{}
	}

	if mmReturnOrderToCourier.defaultExpectation.params != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Expect")
	}

	if mmReturnOrderToCourier.defaultExpectation.paramPtrs == nil {
		mmReturnOrderToCourier.defaultExpectation.paramPtrs = &ReturnOrderServiceMockReturnOrderToCourierParamPtrs{}
	}
	mmReturnOrderToCourier.defaultExpectation.paramPtrs.in = &in
	mmReturnOrderToCourier.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmReturnOrderToCourier
}

// ExpectOptsParam3 sets up expected param opts for ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) ExpectOptsParam3(opts ...grpc.CallOption) *mReturnOrderServiceMockReturnOrderToCourier {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	if mmReturnOrderToCourier.defaultExpectation == nil {
		mmReturnOrderToCourier.defaultExpectation = &ReturnOrderServiceMockReturnOrderToCourierExpectation{}
	}

	if mmReturnOrderToCourier.defaultExpectation.params != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Expect")
	}

	if mmReturnOrderToCourier.defaultExpectation.paramPtrs == nil {
		mmReturnOrderToCourier.defaultExpectation.paramPtrs = &ReturnOrderServiceMockReturnOrderToCourierParamPtrs{}
	}
	mmReturnOrderToCourier.defaultExpectation.paramPtrs.opts = &opts
	mmReturnOrderToCourier.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmReturnOrderToCourier
}

// Inspect accepts an inspector function that has same arguments as the ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Inspect(f func(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption)) *mReturnOrderServiceMockReturnOrderToCourier {
	if mmReturnOrderToCourier.mock.inspectFuncReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("Inspect function is already set for ReturnOrderServiceMock.ReturnOrderToCourier")
	}

	mmReturnOrderToCourier.mock.inspectFuncReturnOrderToCourier = f

	return mmReturnOrderToCourier
}

// Return sets up results that will be returned by ReturnOrderService.ReturnOrderToCourier
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Return(rp1 *order_service.ReturnOrderToCourierResponse, err error) *ReturnOrderServiceMock {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	if mmReturnOrderToCourier.defaultExpectation == nil {
		mmReturnOrderToCourier.defaultExpectation = &ReturnOrderServiceMockReturnOrderToCourierExpectation{mock: mmReturnOrderToCourier.mock}
	}
	mmReturnOrderToCourier.defaultExpectation.results = &ReturnOrderServiceMockReturnOrderToCourierResults{rp1, err}
	mmReturnOrderToCourier.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReturnOrderToCourier.mock
}

// Set uses given function f to mock the ReturnOrderService.ReturnOrderToCourier method
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Set(f func(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption) (rp1 *order_service.ReturnOrderToCourierResponse, err error)) *ReturnOrderServiceMock {
	if mmReturnOrderToCourier.defaultExpectation != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("Default expectation is already set for the ReturnOrderService.ReturnOrderToCourier method")
	}

	if len(mmReturnOrderToCourier.expectations) > 0 {
		mmReturnOrderToCourier.mock.t.Fatalf("Some expectations are already set for the ReturnOrderService.ReturnOrderToCourier method")
	}

	mmReturnOrderToCourier.mock.funcReturnOrderToCourier = f
	mmReturnOrderToCourier.mock.funcReturnOrderToCourierOrigin = minimock.CallerInfo(1)
	return mmReturnOrderToCourier.mock
}

// When sets expectation for the ReturnOrderService.ReturnOrderToCourier which will trigger the result defined by the following
// Then helper
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) When(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption) *ReturnOrderServiceMockReturnOrderToCourierExpectation {
	if mmReturnOrderToCourier.mock.funcReturnOrderToCourier != nil {
		mmReturnOrderToCourier.mock.t.Fatalf("ReturnOrderServiceMock.ReturnOrderToCourier mock is already set by Set")
	}

	expectation := &ReturnOrderServiceMockReturnOrderToCourierExpectation{
		mock:               mmReturnOrderToCourier.mock,
		params:             &ReturnOrderServiceMockReturnOrderToCourierParams{ctx, in, opts},
		expectationOrigins: ReturnOrderServiceMockReturnOrderToCourierExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReturnOrderToCourier.expectations = append(mmReturnOrderToCourier.expectations, expectation)
	return expectation
}

// Then sets up ReturnOrderService.ReturnOrderToCourier return parameters for the expectation previously defined by the When method
func (e *ReturnOrderServiceMockReturnOrderToCourierExpectation) Then(rp1 *order_service.ReturnOrderToCourierResponse, err error) *ReturnOrderServiceMock {
	e.results = &ReturnOrderServiceMockReturnOrderToCourierResults{rp1, err}
	return e.mock
}

// Times sets number of times ReturnOrderService.ReturnOrderToCourier should be invoked
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Times(n uint64) *mReturnOrderServiceMockReturnOrderToCourier {
	if n == 0 {
		mmReturnOrderToCourier.mock.t.Fatalf("Times of ReturnOrderServiceMock.ReturnOrderToCourier mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReturnOrderToCourier.expectedInvocations, n)
	mmReturnOrderToCourier.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReturnOrderToCourier
}

func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) invocationsDone() bool {
	if len(mmReturnOrderToCourier.expectations) == 0 && mmReturnOrderToCourier.defaultExpectation == nil && mmReturnOrderToCourier.mock.funcReturnOrderToCourier == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReturnOrderToCourier.mock.afterReturnOrderToCourierCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReturnOrderToCourier.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReturnOrderToCourier implements mm_commands.ReturnOrderService
func (mmReturnOrderToCourier *ReturnOrderServiceMock) ReturnOrderToCourier(ctx context.Context, in *order_service.ReturnOrderToCourierRequest, opts ...grpc.CallOption) (rp1 *order_service.ReturnOrderToCourierResponse, err error) {
	mm_atomic.AddUint64(&mmReturnOrderToCourier.beforeReturnOrderToCourierCounter, 1)
	defer mm_atomic.AddUint64(&mmReturnOrderToCourier.afterReturnOrderToCourierCounter, 1)

	mmReturnOrderToCourier.t.Helper()

	if mmReturnOrderToCourier.inspectFuncReturnOrderToCourier != nil {
		mmReturnOrderToCourier.inspectFuncReturnOrderToCourier(ctx, in, opts...)
	}

	mm_params := ReturnOrderServiceMockReturnOrderToCourierParams{ctx, in, opts}

	// Record call args
	mmReturnOrderToCourier.ReturnOrderToCourierMock.mutex.Lock()
	mmReturnOrderToCourier.ReturnOrderToCourierMock.callArgs = append(mmReturnOrderToCourier.ReturnOrderToCourierMock.callArgs, &mm_params)
	mmReturnOrderToCourier.ReturnOrderToCourierMock.mutex.Unlock()

	for _, e := range mmReturnOrderToCourier.ReturnOrderToCourierMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.Counter, 1)
		mm_want := mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.params
		mm_want_ptrs := mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.paramPtrs

		mm_got := ReturnOrderServiceMockReturnOrderToCourierParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReturnOrderToCourier.t.Errorf("ReturnOrderServiceMock.ReturnOrderToCourier got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmReturnOrderToCourier.t.Errorf("ReturnOrderServiceMock.ReturnOrderToCourier got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmReturnOrderToCourier.t.Errorf("ReturnOrderServiceMock.ReturnOrderToCourier got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReturnOrderToCourier.t.Errorf("ReturnOrderServiceMock.ReturnOrderToCourier got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReturnOrderToCourier.ReturnOrderToCourierMock.defaultExpectation.results
		if mm_results == nil {
			mmReturnOrderToCourier.t.Fatal("No results are set for the ReturnOrderServiceMock.ReturnOrderToCourier")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmReturnOrderToCourier.funcReturnOrderToCourier != nil {
		return mmReturnOrderToCourier.funcReturnOrderToCourier(ctx, in, opts...)
	}
	mmReturnOrderToCourier.t.Fatalf("Unexpected call to ReturnOrderServiceMock.ReturnOrderToCourier. %v %v %v", ctx, in, opts)
	return
}

// ReturnOrderToCourierAfterCounter returns a count of finished ReturnOrderServiceMock.ReturnOrderToCourier invocations
func (mmReturnOrderToCourier *ReturnOrderServiceMock) ReturnOrderToCourierAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReturnOrderToCourier.afterReturnOrderToCourierCounter)
}

// ReturnOrderToCourierBeforeCounter returns a count of ReturnOrderServiceMock.ReturnOrderToCourier invocations
func (mmReturnOrderToCourier *ReturnOrderServiceMock) ReturnOrderToCourierBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReturnOrderToCourier.beforeReturnOrderToCourierCounter)
}

// Calls returns a list of arguments used in each call to ReturnOrderServiceMock.ReturnOrderToCourier.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReturnOrderToCourier *mReturnOrderServiceMockReturnOrderToCourier) Calls() []*ReturnOrderServiceMockReturnOrderToCourierParams {
	mmReturnOrderToCourier.mutex.RLock()

	argCopy := make([]*ReturnOrderServiceMockReturnOrderToCourierParams, len(mmReturnOrderToCourier.callArgs))
	copy(argCopy, mmReturnOrderToCourier.callArgs)

	mmReturnOrderToCourier.mutex.RUnlock()

	return argCopy
}

// MinimockReturnOrderToCourierDone returns true if the count of the ReturnOrderToCourier invocations corresponds
// the number of defined expectations
func (m *ReturnOrderServiceMock) MinimockReturnOrderToCourierDone() bool {
	if m.ReturnOrderToCourierMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReturnOrderToCourierMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReturnOrderToCourierMock.invocationsDone()
}

// MinimockReturnOrderToCourierInspect logs each unmet expectation
func (m *ReturnOrderServiceMock) MinimockReturnOrderToCourierInspect() {
	for _, e := range m.ReturnOrderToCourierMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReturnOrderServiceMock.ReturnOrderToCourier at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReturnOrderToCourierCounter := mm_atomic.LoadUint64(&m.afterReturnOrderToCourierCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReturnOrderToCourierMock.defaultExpectation != nil && afterReturnOrderToCourierCounter < 1 {
		if m.ReturnOrderToCourierMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ReturnOrderServiceMock.ReturnOrderToCourier at\n%s", m.ReturnOrderToCourierMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ReturnOrderServiceMock.ReturnOrderToCourier at\n%s with params: %#v", m.ReturnOrderToCourierMock.defaultExpectation.expectationOrigins.origin, *m.ReturnOrderToCourierMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReturnOrderToCourier != nil && afterReturnOrderToCourierCounter < 1 {
		m.t.Errorf("Expected call to ReturnOrderServiceMock.ReturnOrderToCourier at\n%s", m.funcReturnOrderToCourierOrigin)
	}

	if !m.ReturnOrderToCourierMock.invocationsDone() && afterReturnOrderToCourierCounter > 0 {
		m.t.Errorf("Expected %d calls to ReturnOrderServiceMock.ReturnOrderToCourier at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReturnOrderToCourierMock.expectedInvocations), m.ReturnOrderToCourierMock.expectedInvocationsOrigin, afterReturnOrderToCourierCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReturnOrderServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReturnOrderToCourierInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReturnOrderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReturnOrderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReturnOrderToCourierDone()
}
