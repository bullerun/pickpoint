// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i OzonHW1/client/internal/commands.AcceptReturnService -o accept_return_service_mock.go -n AcceptReturnServiceMock -p mock

import (
	order_service "OzonHW1/pkg/order-service/v1"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// AcceptReturnServiceMock implements mm_commands.AcceptReturnService
type AcceptReturnServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAcceptReturn          func(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption) (ap1 *order_service.AcceptReturnResponse, err error)
	funcAcceptReturnOrigin    string
	inspectFuncAcceptReturn   func(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption)
	afterAcceptReturnCounter  uint64
	beforeAcceptReturnCounter uint64
	AcceptReturnMock          mAcceptReturnServiceMockAcceptReturn
}

// NewAcceptReturnServiceMock returns a mock for mm_commands.AcceptReturnService
func NewAcceptReturnServiceMock(t minimock.Tester) *AcceptReturnServiceMock {
	m := &AcceptReturnServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AcceptReturnMock = mAcceptReturnServiceMockAcceptReturn{mock: m}
	m.AcceptReturnMock.callArgs = []*AcceptReturnServiceMockAcceptReturnParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAcceptReturnServiceMockAcceptReturn struct {
	optional           bool
	mock               *AcceptReturnServiceMock
	defaultExpectation *AcceptReturnServiceMockAcceptReturnExpectation
	expectations       []*AcceptReturnServiceMockAcceptReturnExpectation

	callArgs []*AcceptReturnServiceMockAcceptReturnParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AcceptReturnServiceMockAcceptReturnExpectation specifies expectation struct of the AcceptReturnService.AcceptReturn
type AcceptReturnServiceMockAcceptReturnExpectation struct {
	mock               *AcceptReturnServiceMock
	params             *AcceptReturnServiceMockAcceptReturnParams
	paramPtrs          *AcceptReturnServiceMockAcceptReturnParamPtrs
	expectationOrigins AcceptReturnServiceMockAcceptReturnExpectationOrigins
	results            *AcceptReturnServiceMockAcceptReturnResults
	returnOrigin       string
	Counter            uint64
}

// AcceptReturnServiceMockAcceptReturnParams contains parameters of the AcceptReturnService.AcceptReturn
type AcceptReturnServiceMockAcceptReturnParams struct {
	ctx  context.Context
	in   *order_service.AcceptReturnRequest
	opts []grpc.CallOption
}

// AcceptReturnServiceMockAcceptReturnParamPtrs contains pointers to parameters of the AcceptReturnService.AcceptReturn
type AcceptReturnServiceMockAcceptReturnParamPtrs struct {
	ctx  *context.Context
	in   **order_service.AcceptReturnRequest
	opts *[]grpc.CallOption
}

// AcceptReturnServiceMockAcceptReturnResults contains results of the AcceptReturnService.AcceptReturn
type AcceptReturnServiceMockAcceptReturnResults struct {
	ap1 *order_service.AcceptReturnResponse
	err error
}

// AcceptReturnServiceMockAcceptReturnOrigins contains origins of expectations of the AcceptReturnService.AcceptReturn
type AcceptReturnServiceMockAcceptReturnExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Optional() *mAcceptReturnServiceMockAcceptReturn {
	mmAcceptReturn.optional = true
	return mmAcceptReturn
}

// Expect sets up expected params for AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Expect(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption) *mAcceptReturnServiceMockAcceptReturn {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	if mmAcceptReturn.defaultExpectation == nil {
		mmAcceptReturn.defaultExpectation = &AcceptReturnServiceMockAcceptReturnExpectation{}
	}

	if mmAcceptReturn.defaultExpectation.paramPtrs != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by ExpectParams functions")
	}

	mmAcceptReturn.defaultExpectation.params = &AcceptReturnServiceMockAcceptReturnParams{ctx, in, opts}
	mmAcceptReturn.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAcceptReturn.expectations {
		if minimock.Equal(e.params, mmAcceptReturn.defaultExpectation.params) {
			mmAcceptReturn.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAcceptReturn.defaultExpectation.params)
		}
	}

	return mmAcceptReturn
}

// ExpectCtxParam1 sets up expected param ctx for AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) ExpectCtxParam1(ctx context.Context) *mAcceptReturnServiceMockAcceptReturn {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	if mmAcceptReturn.defaultExpectation == nil {
		mmAcceptReturn.defaultExpectation = &AcceptReturnServiceMockAcceptReturnExpectation{}
	}

	if mmAcceptReturn.defaultExpectation.params != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Expect")
	}

	if mmAcceptReturn.defaultExpectation.paramPtrs == nil {
		mmAcceptReturn.defaultExpectation.paramPtrs = &AcceptReturnServiceMockAcceptReturnParamPtrs{}
	}
	mmAcceptReturn.defaultExpectation.paramPtrs.ctx = &ctx
	mmAcceptReturn.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAcceptReturn
}

// ExpectInParam2 sets up expected param in for AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) ExpectInParam2(in *order_service.AcceptReturnRequest) *mAcceptReturnServiceMockAcceptReturn {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	if mmAcceptReturn.defaultExpectation == nil {
		mmAcceptReturn.defaultExpectation = &AcceptReturnServiceMockAcceptReturnExpectation{}
	}

	if mmAcceptReturn.defaultExpectation.params != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Expect")
	}

	if mmAcceptReturn.defaultExpectation.paramPtrs == nil {
		mmAcceptReturn.defaultExpectation.paramPtrs = &AcceptReturnServiceMockAcceptReturnParamPtrs{}
	}
	mmAcceptReturn.defaultExpectation.paramPtrs.in = &in
	mmAcceptReturn.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmAcceptReturn
}

// ExpectOptsParam3 sets up expected param opts for AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) ExpectOptsParam3(opts ...grpc.CallOption) *mAcceptReturnServiceMockAcceptReturn {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	if mmAcceptReturn.defaultExpectation == nil {
		mmAcceptReturn.defaultExpectation = &AcceptReturnServiceMockAcceptReturnExpectation{}
	}

	if mmAcceptReturn.defaultExpectation.params != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Expect")
	}

	if mmAcceptReturn.defaultExpectation.paramPtrs == nil {
		mmAcceptReturn.defaultExpectation.paramPtrs = &AcceptReturnServiceMockAcceptReturnParamPtrs{}
	}
	mmAcceptReturn.defaultExpectation.paramPtrs.opts = &opts
	mmAcceptReturn.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmAcceptReturn
}

// Inspect accepts an inspector function that has same arguments as the AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Inspect(f func(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption)) *mAcceptReturnServiceMockAcceptReturn {
	if mmAcceptReturn.mock.inspectFuncAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("Inspect function is already set for AcceptReturnServiceMock.AcceptReturn")
	}

	mmAcceptReturn.mock.inspectFuncAcceptReturn = f

	return mmAcceptReturn
}

// Return sets up results that will be returned by AcceptReturnService.AcceptReturn
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Return(ap1 *order_service.AcceptReturnResponse, err error) *AcceptReturnServiceMock {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	if mmAcceptReturn.defaultExpectation == nil {
		mmAcceptReturn.defaultExpectation = &AcceptReturnServiceMockAcceptReturnExpectation{mock: mmAcceptReturn.mock}
	}
	mmAcceptReturn.defaultExpectation.results = &AcceptReturnServiceMockAcceptReturnResults{ap1, err}
	mmAcceptReturn.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAcceptReturn.mock
}

// Set uses given function f to mock the AcceptReturnService.AcceptReturn method
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Set(f func(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption) (ap1 *order_service.AcceptReturnResponse, err error)) *AcceptReturnServiceMock {
	if mmAcceptReturn.defaultExpectation != nil {
		mmAcceptReturn.mock.t.Fatalf("Default expectation is already set for the AcceptReturnService.AcceptReturn method")
	}

	if len(mmAcceptReturn.expectations) > 0 {
		mmAcceptReturn.mock.t.Fatalf("Some expectations are already set for the AcceptReturnService.AcceptReturn method")
	}

	mmAcceptReturn.mock.funcAcceptReturn = f
	mmAcceptReturn.mock.funcAcceptReturnOrigin = minimock.CallerInfo(1)
	return mmAcceptReturn.mock
}

// When sets expectation for the AcceptReturnService.AcceptReturn which will trigger the result defined by the following
// Then helper
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) When(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption) *AcceptReturnServiceMockAcceptReturnExpectation {
	if mmAcceptReturn.mock.funcAcceptReturn != nil {
		mmAcceptReturn.mock.t.Fatalf("AcceptReturnServiceMock.AcceptReturn mock is already set by Set")
	}

	expectation := &AcceptReturnServiceMockAcceptReturnExpectation{
		mock:               mmAcceptReturn.mock,
		params:             &AcceptReturnServiceMockAcceptReturnParams{ctx, in, opts},
		expectationOrigins: AcceptReturnServiceMockAcceptReturnExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAcceptReturn.expectations = append(mmAcceptReturn.expectations, expectation)
	return expectation
}

// Then sets up AcceptReturnService.AcceptReturn return parameters for the expectation previously defined by the When method
func (e *AcceptReturnServiceMockAcceptReturnExpectation) Then(ap1 *order_service.AcceptReturnResponse, err error) *AcceptReturnServiceMock {
	e.results = &AcceptReturnServiceMockAcceptReturnResults{ap1, err}
	return e.mock
}

// Times sets number of times AcceptReturnService.AcceptReturn should be invoked
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Times(n uint64) *mAcceptReturnServiceMockAcceptReturn {
	if n == 0 {
		mmAcceptReturn.mock.t.Fatalf("Times of AcceptReturnServiceMock.AcceptReturn mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAcceptReturn.expectedInvocations, n)
	mmAcceptReturn.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAcceptReturn
}

func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) invocationsDone() bool {
	if len(mmAcceptReturn.expectations) == 0 && mmAcceptReturn.defaultExpectation == nil && mmAcceptReturn.mock.funcAcceptReturn == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAcceptReturn.mock.afterAcceptReturnCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAcceptReturn.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AcceptReturn implements mm_commands.AcceptReturnService
func (mmAcceptReturn *AcceptReturnServiceMock) AcceptReturn(ctx context.Context, in *order_service.AcceptReturnRequest, opts ...grpc.CallOption) (ap1 *order_service.AcceptReturnResponse, err error) {
	mm_atomic.AddUint64(&mmAcceptReturn.beforeAcceptReturnCounter, 1)
	defer mm_atomic.AddUint64(&mmAcceptReturn.afterAcceptReturnCounter, 1)

	mmAcceptReturn.t.Helper()

	if mmAcceptReturn.inspectFuncAcceptReturn != nil {
		mmAcceptReturn.inspectFuncAcceptReturn(ctx, in, opts...)
	}

	mm_params := AcceptReturnServiceMockAcceptReturnParams{ctx, in, opts}

	// Record call args
	mmAcceptReturn.AcceptReturnMock.mutex.Lock()
	mmAcceptReturn.AcceptReturnMock.callArgs = append(mmAcceptReturn.AcceptReturnMock.callArgs, &mm_params)
	mmAcceptReturn.AcceptReturnMock.mutex.Unlock()

	for _, e := range mmAcceptReturn.AcceptReturnMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmAcceptReturn.AcceptReturnMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAcceptReturn.AcceptReturnMock.defaultExpectation.Counter, 1)
		mm_want := mmAcceptReturn.AcceptReturnMock.defaultExpectation.params
		mm_want_ptrs := mmAcceptReturn.AcceptReturnMock.defaultExpectation.paramPtrs

		mm_got := AcceptReturnServiceMockAcceptReturnParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAcceptReturn.t.Errorf("AcceptReturnServiceMock.AcceptReturn got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAcceptReturn.AcceptReturnMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmAcceptReturn.t.Errorf("AcceptReturnServiceMock.AcceptReturn got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAcceptReturn.AcceptReturnMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmAcceptReturn.t.Errorf("AcceptReturnServiceMock.AcceptReturn got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAcceptReturn.AcceptReturnMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAcceptReturn.t.Errorf("AcceptReturnServiceMock.AcceptReturn got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAcceptReturn.AcceptReturnMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAcceptReturn.AcceptReturnMock.defaultExpectation.results
		if mm_results == nil {
			mmAcceptReturn.t.Fatal("No results are set for the AcceptReturnServiceMock.AcceptReturn")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmAcceptReturn.funcAcceptReturn != nil {
		return mmAcceptReturn.funcAcceptReturn(ctx, in, opts...)
	}
	mmAcceptReturn.t.Fatalf("Unexpected call to AcceptReturnServiceMock.AcceptReturn. %v %v %v", ctx, in, opts)
	return
}

// AcceptReturnAfterCounter returns a count of finished AcceptReturnServiceMock.AcceptReturn invocations
func (mmAcceptReturn *AcceptReturnServiceMock) AcceptReturnAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReturn.afterAcceptReturnCounter)
}

// AcceptReturnBeforeCounter returns a count of AcceptReturnServiceMock.AcceptReturn invocations
func (mmAcceptReturn *AcceptReturnServiceMock) AcceptReturnBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReturn.beforeAcceptReturnCounter)
}

// Calls returns a list of arguments used in each call to AcceptReturnServiceMock.AcceptReturn.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAcceptReturn *mAcceptReturnServiceMockAcceptReturn) Calls() []*AcceptReturnServiceMockAcceptReturnParams {
	mmAcceptReturn.mutex.RLock()

	argCopy := make([]*AcceptReturnServiceMockAcceptReturnParams, len(mmAcceptReturn.callArgs))
	copy(argCopy, mmAcceptReturn.callArgs)

	mmAcceptReturn.mutex.RUnlock()

	return argCopy
}

// MinimockAcceptReturnDone returns true if the count of the AcceptReturn invocations corresponds
// the number of defined expectations
func (m *AcceptReturnServiceMock) MinimockAcceptReturnDone() bool {
	if m.AcceptReturnMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AcceptReturnMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AcceptReturnMock.invocationsDone()
}

// MinimockAcceptReturnInspect logs each unmet expectation
func (m *AcceptReturnServiceMock) MinimockAcceptReturnInspect() {
	for _, e := range m.AcceptReturnMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AcceptReturnServiceMock.AcceptReturn at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAcceptReturnCounter := mm_atomic.LoadUint64(&m.afterAcceptReturnCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptReturnMock.defaultExpectation != nil && afterAcceptReturnCounter < 1 {
		if m.AcceptReturnMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AcceptReturnServiceMock.AcceptReturn at\n%s", m.AcceptReturnMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AcceptReturnServiceMock.AcceptReturn at\n%s with params: %#v", m.AcceptReturnMock.defaultExpectation.expectationOrigins.origin, *m.AcceptReturnMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptReturn != nil && afterAcceptReturnCounter < 1 {
		m.t.Errorf("Expected call to AcceptReturnServiceMock.AcceptReturn at\n%s", m.funcAcceptReturnOrigin)
	}

	if !m.AcceptReturnMock.invocationsDone() && afterAcceptReturnCounter > 0 {
		m.t.Errorf("Expected %d calls to AcceptReturnServiceMock.AcceptReturn at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AcceptReturnMock.expectedInvocations), m.AcceptReturnMock.expectedInvocationsOrigin, afterAcceptReturnCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AcceptReturnServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAcceptReturnInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AcceptReturnServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AcceptReturnServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAcceptReturnDone()
}
